{"version":3,"sources":["header.js","App.js","index.js"],"names":["Header","url","App","state","searchText","searchedColumn","data","loading","fetchAPI","setState","fetch","then","response","json","result","catch","exception","console","log","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","searchInput","placeholder","value","onChange","e","target","onPressEnter","handleSearch","marginBottom","display","type","onClick","icon","SearchOutlined","size","width","handleReset","closeDropdown","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","this","columns","title","key","occupation","map","name","index","img","src","alt","height","appearance","better_call_saul_appearance","length","rowKey","char_id","dataSource","React","Component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.264c59eb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <h1>React Task</h1>;\r\n};\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./style.css\";\nimport \"antd/dist/antd.css\";\nimport { Table, Input, Button, Space } from \"antd\";\nimport Highlighter from \"react-highlight-words\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport Header from \"./header.js\";\nconst url = \"https://breakingbadapi.com/api/characters\";\n\nclass App extends React.Component {\n  state = {\n    searchText: \"\",\n    searchedColumn: \"\",\n    data: \"\",\n    loading: \"true\",\n  };\n\n  fetchAPI = () => {\n    this.setState({ loading: true });\n    fetch(url)\n      .then((response) => response.json())\n      .then((result) => {\n        this.setState({ data: result });\n        this.setState({ loading: false });\n      })\n      .catch((exception) => {\n        console.log(exception);\n        this.setState({ loading: false });\n      });\n  };\n\n  componentDidMount() {\n    this.fetchAPI();\n  }\n\n  getColumnSearchProps = (dataIndex) => ({\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node) => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={() =>\n            this.handleSearch(selectedKeys, confirm, dataIndex)\n          }\n          style={{ marginBottom: 8, display: \"block\" }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() =>\n              this.handleSearch(selectedKeys, confirm, dataIndex)\n            }\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => this.handleReset(clearFilters)}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n          <Button\n            type=\"link\"\n            size=\"small\"\n            onClick={() => {\n              confirm({ closeDropdown: false });\n              this.setState({\n                searchText: selectedKeys[0],\n                searchedColumn: dataIndex,\n              });\n            }}\n          >\n            Filter\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered) => (\n      <SearchOutlined\n        style={{ color: filtered ? \"#1890ff\" : undefined }}\n      />\n    ),\n    onFilter: (value, record) =>\n      record[dataIndex]\n        ? record[dataIndex]\n            .toString()\n            .toLowerCase()\n            .includes(value.toLowerCase())\n        : \"\",\n    onFilterDropdownVisibleChange: (visible) => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select(), 100);\n      }\n    },\n    render: (text) =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text ? text.toString() : \"\"}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = (clearFilters) => {\n    clearFilters();\n    this.setState({ searchText: \"\" });\n  };\n\n  render() {\n    if (this.state.loading) {\n      console.log(\"loading\");\n      return (\n        <main>\n          <h1>Loading...</h1>\n        </main>\n      );\n    }\n\n    const columns = [\n      {\n        title: \"char_id\",\n        dataIndex: \"char_id\",\n        key: \"char_id\",\n      },\n\n      {\n        title: \"Name\",\n        dataIndex: \"name\",\n        key: \"name\",\n        width: \"30%\",\n        ...this.getColumnSearchProps(\"name\"),\n      },\n\n      {\n        title: \"birthday\",\n        dataIndex: \"birthday\",\n        key: \"birthday\",\n      },\n\n      {\n        title: \"occupation\",\n        dataIndex: \"occupation\",\n        render: (occupation) =>\n          occupation.map((name, index) => (\n            <h4 key={index}>{name}</h4>\n          )),\n        key: \"occupation\",\n        width: \"30%\",\n\n        ...this.getColumnSearchProps(\"occupation\"),\n      },\n      {\n        title: \"img\",\n        dataIndex: \"img\",\n        render: (img) => (\n          <img\n            src={img}\n            alt=\"Default name\"\n            height={100}\n            width={100}\n          />\n        ),\n        key: \"img\",\n      },\n      {\n        title: \"status\",\n        dataIndex: \"status\",\n\n        key: \"status\",\n      },\n      {\n        title: \"nickname\",\n        dataIndex: \"nickname\",\n\n        key: \"nickname\",\n      },\n      {\n        title: \"appearance\",\n        dataIndex: \"appearance\",\n        render: (appearance) =>\n          appearance.map((name, index) => (\n            <h4 key={index}>{name}</h4>\n          )),\n        key: \"appearance\",\n      },\n      {\n        title: \"portrayed\",\n        dataIndex: \"portrayed\",\n\n        key: \"portrayed\",\n      },\n      {\n        title: \"category\",\n        dataIndex: \"category\",\n\n        key: \"category\",\n      },\n      {\n        title: \"better_call_saul_appearance\",\n        dataIndex: \"better_call_saul_appearance\",\n        render: (better_call_saul_appearance) => {\n          if (better_call_saul_appearance.length === 0) {\n            return <h4>Nill</h4>;\n          } else {\n            const result = better_call_saul_appearance.map(\n              (name, index) => <h4 key={index}>{name}</h4>\n            );\n            return result;\n          }\n        },\n\n        key: \"better_call_saul_appearance\",\n      },\n    ];\n\n    return (\n      <>\n        <Header />\n        <Table\n          rowKey={(record) => record.char_id}\n          columns={columns}\n          dataSource={this.state.data}\n        />\n        ;\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}